% layout 'default';
% title 'Logbook';

<h1>Ham Logbook</h1>

<a href="/new" class="btn btn-primary mb-3">New QSO</a>
<a href="/import" class="btn btn-secondary mb-3">Import</a>
<a href="/export" class="btn btn-secondary mb-3">Export</a>

<form method="get" class="mb-3">
  <div class="row g-2">
    <div class="col">
      <input type="text" name="call" value="<%= stash('filters')->{call} // '' %>" placeholder="Callsign" class="form-control">
    </div>
    <div class="col">
      <input type="text" name="mode" value="<%= stash('filters')->{mode} // '' %>" placeholder="Mode" class="form-control">
    </div>
    <div class="col">
      <input type="date" name="from_date" value="<%= stash('filters')->{from_date} // '' %>" class="form-control">
    </div>
    <div class="col">
      <input type="date" name="to_date" value="<%= stash('filters')->{to_date} // '' %>" class="form-control">
    </div>
    <div class="col-auto">
      <button type="submit" class="btn btn-primary">Filter</button>
    </div>
  </div>
</form>

<table id="log-table" class="table table-striped table-sm">
  <thead>
    <tr id="column-headers">
% my @columns = (
%  ['Date', 'date'], ['Time', 'time'], ['Call', 'call'], ['Freq', 'frequency'],
%  ['Mode', 'mode'], ['RST S', 'rst_sent'], ['RST R', 'rst_recv'], ['Grid', 'grid'],
%  ['QSL S', 'qsl_sent'], ['QSL R', 'qsl_recv'], ['Notes', 'notes']
%);
% for my $col (@columns) {
      <th draggable="true" data-field="<%= $col->[1] %>" style="cursor:pointer">
        <%= $col->[0] %>
        <span class="sort-indicator"></span>
      </th>
% }
      <th>Actions</th>
    </tr>
  </thead>
  <tbody id="log-body">
% for my $entry (@$log) {
    <tr>
%   for my $col (@columns) {
      <td data-field="<%= $col->[1] %>"><%= $entry->{$col->[1]} // '' %></td>
%   }
      <td>
        <form method="post" action="/delete/<%= $entry->{id} %>" style="display:inline" onsubmit="return confirm('Are you sure you want to delete this entry?');">
          <button type="submit" class="btn btn-sm btn-danger">Delete</button>
        </form>
        <a href="/undo/<%= $entry->{id} %>" class="btn btn-sm btn-secondary">Undo</a>
      </td>
    </tr>
% }
  </tbody>
</table>

<script>
  const headerRow = document.getElementById('column-headers');
  const tableBody = document.getElementById('log-body');
  let dragging, startIndex;

  // Drag and Drop Columns
  headerRow.addEventListener('dragstart', e => {
    dragging = e.target;
    startIndex = [...headerRow.children].indexOf(dragging);
  });

  headerRow.addEventListener('dragover', e => {
    e.preventDefault();
    const over = e.target.closest('th');
    if (!over || over === dragging) return;
    const overIndex = [...headerRow.children].indexOf(over);
    if (overIndex >= 0) {
      headerRow.insertBefore(dragging, overIndex > startIndex ? over.nextSibling : over);
      updateBodyColumns();
    }
  });

  function updateBodyColumns() {
    const order = [...headerRow.children].map(th => th.getAttribute('data-field'));
    [...tableBody.children].forEach(row => {
      const cells = {};
      [...row.children].forEach(td => {
        const field = td.getAttribute('data-field');
        if (field) cells[field] = td;
      });
      row.innerHTML = '';
      order.forEach(field => {
        if (cells[field]) row.appendChild(cells[field]);
      });
      // Append Actions cell
      const actions = row.querySelector('td:not([data-field])');
      if (actions) row.appendChild(actions);
    });
  }

  // Sorting logic
  let currentSort = { field: null, asc: true };

  function clearSortIndicators() {
    [...headerRow.children].forEach(th => {
      const span = th.querySelector('.sort-indicator');
      if (span) span.textContent = '';
    });
  }

  function sortTable(field, asc) {
    const rowsArray = Array.from(tableBody.querySelectorAll('tr'));

    rowsArray.sort((a, b) => {
      const aCell = a.querySelector(`td[data-field="${field}"]`);
      const bCell = b.querySelector(`td[data-field="${field}"]`);
      let aVal = aCell ? aCell.textContent.trim() : '';
      let bVal = bCell ? bCell.textContent.trim() : '';

      // Try to parse as numbers, fallback to strings
      const aNum = parseFloat(aVal.replace(/[^0-9.\-]/g, ''));
      const bNum = parseFloat(bVal.replace(/[^0-9.\-]/g, ''));

      if (!isNaN(aNum) && !isNaN(bNum)) {
        aVal = aNum;
        bVal = bNum;
      }

      if (aVal < bVal) return asc ? -1 : 1;
      if (aVal > bVal) return asc ? 1 : -1;
      return 0;
    });

    // Reattach rows in sorted order
    rowsArray.forEach(row => tableBody.appendChild(row));
  }

  // Add click handlers for sorting on each draggable header (except Actions)
  [...headerRow.children].forEach(th => {
    if (!th.hasAttribute('data-field')) return;
    th.style.userSelect = 'none';

    th.addEventListener('click', () => {
      const field = th.getAttribute('data-field');
      if (currentSort.field === field) {
        currentSort.asc = !currentSort.asc; // Toggle sort direction
      } else {
        currentSort.field = field;
        currentSort.asc = true; // Default ascending
      }
      clearSortIndicators();
      th.querySelector('.sort-indicator').textContent = currentSort.asc ? ' ▲' : ' ▼';
      sortTable(currentSort.field, currentSort.asc);
    });
  });

  // Initial load - update body columns and load saved column order if any
  updateBodyColumns();

  // Optionally, load and save column order from localStorage here as before
</script>
